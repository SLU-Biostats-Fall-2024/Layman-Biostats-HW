---
title: "Homework-28"
author: "ML"
format: html
editor: visual
---

## Homework-28: GSWR Chapter 8, Making Pretty Plots

I'll work through chapter 8 of Getting Started with R, using the "Compensation.csv" dataset to make plots using ggplot2 functions

Clear Environment and Setup Workshops

```{r}
rm(list = ls())
library(tidyverse)
library(ggfortify)
library(here)
```

Read in the data + change factor variable

```{r}
compensation<- read.csv(here("data","compensation.csv"))
compensation$Grazing<-as.factor(compensation$Grazing)
```

-   online resources for plotting include web pages for dplyr and ggplot2

    -   also, Stack Overflow for more specific questions

## Preparation - 

Build a box + whisker plot and assign graphs to objects eg_scatter and eg_box

```{r}
#BASE scatterplot
eg_scatter<-
  ggplot(data=compensation, aes(x=Root, y=Fruit))+
  geom_point()

#BASE box-and-whiskers plot
eg_box<-
  ggplot(data=compensation, aes(x=Grazing, y=Fruit))+
  geom_boxplot()
```

open the object eg_scatter and add a b/w theme to it

```{r}
eg_scatter+theme_bw()
```

use gridExtra package (in dplyr) to see multiple figures on the same page

grid.arrange() is essentially a list of graphs, organized into rows or columns

```{r}
grid.arrange(eg_scatter,eg_box,nrow=1)
```

## Customizing Notes

things you may want to customize

-   axis labels + positions

-   axis ranges + tick locations

-   grey background + gridlines

-   boxes and title in the key

-   text annotation inside the plot

Make a ggplot() figure and use scale(), theme(), and aes() to make these customizations

## Customizing Axes

functions: xlab(), ylab(), labs()

Use the eg_scatter to add these features

```{r}
eg_scatter+xlab("Root Biomass") + ylab("Fruit Production") #axis labels
eg_scatter+ggtitle("TITLE") #title

eg_scatter+labs(title="title2",x="root biomass", y="fruit production") #axis labels and title
eg_scatter+xlim(0,20) +ylim(0,140) #alters the range of the axes
eg_scatter+ annotate("text", x=c(6,8), y=c(105,25), label=c("Text up here...", "and text down here...")) # places texts on locations using the plot's gridscale
```

## Customizing Scales

Using the eg_scatter to show these features

```{r}
eg_scatter+scale_x_continuous(limits=c(4,11), breaks=4:11) # extends xaxis range from 4 to 11 and puts sticks every 1 step between 4 and 11

ggplot(data=compensation, aes(x=Root, y=Fruit,colour=Grazing))+
  geom_point()+
  scale_colour_manual(values=c(Grazed="brown", Ungrazed="green")) # customizes colors to each group wiht layering

eg_box+
  scale_y_continuous(breaks=seq(from = 10, to = 150, by = 20), trans="log10") # log transforms the y axis of the plot
```

## Customizing Themes

functions: theme(), ggtheme()

element() specifies arguments for the panel group and can be customized with fill= and colour =

```{r}
eg_scatter+
  theme(
    panel.background=element_rect(fill=NA,colour="black"), #removes black background
    panel.grid.minor= element_blank(), #removes minor gridlines
    panel.grid.major = element_line(colour="lightblue") #generates light blue major gridlines
  )

```

```{r}
eg_box+
  theme(
    axis.title.x=element_text(colour="cornflowerblue", size=rel(2)), # adjust colour and size of x-axis title
    axis.text.x=element_text(angle=45,size=13,vjust=0.5)) #adjust angle of the x-axis tick labels
```

Now, alter the names of the levels on the graphs

```{r}
eg_box+scale_x_discrete (limits=c("Ungrazed", "Grazed"),
                         labels=c("Control", "Grazed"))
```

Or, we can make a "clean" key instead

```{r}
ggplot(compensation,aes(x=Root,y=Fruit,colour=Grazing))+
  geom_point()+
  theme(legend.key=element_rect(fill=NA)) # new rectangle for a key

ggplot(compensation,aes(x=Root,y=Fruit,colour=Grazing))+
  geom_point()+
  theme(legend.position="none") # or get rid of it entirely
```

With all of this practice and examples I can use these functions to make lots of pretty figures!
